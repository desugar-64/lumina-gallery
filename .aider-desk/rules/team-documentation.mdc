# Transformable Content Best Practices

## When to Use
- Any zoomable/pannable content
- Programmatic focus requirements
- Complex gesture interactions

## Implementation Notes
1. Always:
   - Use `snapshotFlow` for state synchronization
   - Cache matrix operations
   - Handle edge cases (empty bounds, extreme zooms)

2. Avoid:
   - Direct matrix manipulation outside state
   - Multiple transformation sources
   - Ignoring content size changes

## Performance
- Reuse FloatArray for matrix values
- Minimize allocations in gesture handlers
- Pre-calculate expensive bounds math

## Transformable Content Animation Patterns

### Problem Statement
Implement smooth zoom/pan animations with programmatic focus that:
1. Respects gesture interactions
2. Avoids state desynchronization
3. Maintains 60fps performance

### Root Cause Analysis (Five Whys)
1. **Problem**: Jumps between gestures and animations  
   **Why?**: Matrix and Animatable states were desynchronized  
   **Solution**: Single source of truth via `MatrixAnimator`

### Key Learnings
1. **Unified Transformation Pipeline**:
   ```kotlin
   class MatrixAnimator(initial: Matrix, spec: AnimationSpec<Matrix>) {
       private val animatable = Animatable(initial, MatrixVectorConverter)
       // Single source for all transformations
   }
   ```
2. **Proper Matrix Animation**:
   - Implemented `TwoWayConverter<Matrix, AnimationVector4D>`
   - Syncs scale (X/Y) and translation (X/Y) as a single unit

3. **Gesture-Animation Harmony**:
   - Always check `!state.isAnimating` before handling gestures
   - Snap matrix state immediately on gesture start

### Best Practices
1. **For Animation**:
   ```kotlin
   suspend fun focusOn(bounds: Rect) {
       isAnimating = true
       try {
           matrixAnimator.animateTo(targetMatrix) // Physics-based
       } finally {
           isAnimating = false // Always reset
       }
   }
   ```
2. **For Performance**:
   - Use `derivedStateOf` for zoom/offset to minimize recomposition
   - Cache `FloatArray(9)` for matrix operations

3. **Edge Cases Handled**:
   - Interrupted animations
   - Minimum/maximum zoom clamping
   - Empty content bounds

### Visualization of the Solution
```
[Gesture] → [Update Matrix] → [Sync State]  
[Animation] → [MatrixAnimator] → [Single Source of Truth]
```

### Code Healthy Metrics
- **Coupling**: Low (MatrixAnimator encapsulates all transform logic)
- **Cohesion**: High (All transformation code in one class)
- **Performance**: No frame drops during 10K+ matrix ops/s in tests

### Future Improvements
1. Add debug overlays for transformation origin points
2. Support pinch-zoom pivot point animations
3. Document spring tuning parameters:
   ```kotlin
   spring(
       stiffness = 800f, 
       dampingRatio = 0.6f 
   )
   ```
