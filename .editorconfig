# EditorConfig is awesome: https://EditorConfig.org

# Top-most EditorConfig file
root = true

[*.{kt,kts}]
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true

# Ktlint Standard Rules
# https://pinterest.github.io/ktlint/latest/rules/standard/
ktlint_standard_chain-wrapping = enabled
ktlint_standard_comment-spacing = enabled
ktlint_standard_filename = enabled
ktlint_standard_final-newline = enabled
# ktlint_standard_function-naming = enabled # See experimental rule below for Composable handling
ktlint_standard_function-signature = enabled
ktlint_standard_if-else-wrapping = enabled
ktlint_standard_import-ordering = disabled
ktlint_standard_indent = enabled
ktlint_standard_max-line-length = 180
ktlint_standard_modifier-order = enabled
ktlint_standard_no-blank-line-before-rbrace = enabled
ktlint_standard_no-consecutive-blank-lines = enabled
ktlint_standard_no-empty-class-bodies = enabled
ktlint_standard_no-line-break-after-else = enabled
ktlint_standard_no-line-break-before-assignment = enabled
ktlint_standard_no-multi-spaces = enabled
ktlint_standard_no-semi = enabled
ktlint_standard_no-trailing-spaces = enabled
ktlint_standard_no-unit-return = enabled
ktlint_standard_no-used-imports = enabled
ktlint_standard_no-wildcard-imports = disabled # Often debated; enable if your team prefers explicit imports for everything
ktlint_standard_package-name = enabled
ktlint_standard_parameter-list-wrapping = enabled
# ktlint_standard_property-naming = enabled # Can conflict with some Compose patterns like `object Colors`
ktlint_standard_string-template = enabled
ktlint_standard_trailing-comma-on-call-site = enabled # Recommended for cleaner diffs
ktlint_standard_trailing-comma-on-declaration-site = enabled # Recommended for cleaner diffs
ktlint_standard_wrapping = enabled

# Ktlint Experimental Rules (use with caution, may change)
# https://pinterest.github.io/ktlint/latest/rules/experimental/
ktlint_experimental = true
ktlint_experimental_argument-list-wrapping = disabled # Often too strict, conflicts with parameter-list-wrapping
ktlint_experimental_blank-line-before-declaration = enabled
ktlint_experimental_discouraged-comment-location = enabled
ktlint_experimental_enum-entry-name-case = enabled
ktlint_experimental_function-naming = enabled
# Allows PascalCase for @Composable functions, which is the convention
ktlint_function_naming_ignore_when_annotated_with = Composable
ktlint_experimental_multiline-if-else = enabled
ktlint_experimental_no-empty-first-line-in-method-block = enabled
ktlint_experimental_package-name = enabled
ktlint_experimental_spacing-around-angle-brackets = enabled
ktlint_experimental_spacing-around-double-colon = enabled
ktlint_experimental_spacing-between-declarations-with-annotations = enabled
ktlint_experimental_spacing-between-declarations-with-comments = enabled
ktlint_experimental_type-argument-list-spacing = enabled
ktlint_experimental_unary-op-spacing = enabled

# Ktlint Official Code Style (choose one, or rely on standard/experimental)
ktlint_code_style = android_studio
# Using android_studio might be a good default for Android projects.
# However, the individual rule settings above give more granular control.
# If you set ktlint_code_style, it might override some individual settings.
# It's generally recommended to either use a predefined code style OR define rules individually.
# For this example, we are defining rules individually.

# Jetpack Compose specific considerations (leveraging Ktlint's flexibility)
# These are not direct Ktlint rule names but configurations for existing rules
# or rely on community rule sets if you add them (e.g., Twitter Compose Rules).

# Example for custom rule sets (if you add them to your Ktlint setup)
# This assumes you have a ruleset like 'com.twitter.compose' configured in your build.gradle
# ktlint_compose_some-custom-compose-rule = enabled

# Maximum line length (already set in standard, but can be reiterated or adjusted)
max_line_length = 180

# Indentation size
indent_size = 4
continuation_indent_size = 4

# For Jetpack Compose, allowing PascalCase for @Composable functions is crucial.
# The `ktlint_function_naming_ignore_when_annotated_with = Composable` above handles this.

# Consider disabling wildcard imports more strictly if not done above.
# ktlint_standard_no-wildcard-imports = enabled

# Ensure Modifier order (often handled by modifier-order, but good to be mindful of)
# No specific .editorconfig for this beyond the standard modifier-order,
# but ensure your team follows Compose conventions for Modifier placement.

# Naming of Composable functions and parameters
# The `ktlint_experimental_function-naming` with the Composable annotation ignore helps.
# For parameter naming, adhere to Kotlin/Compose conventions.

# Rules for @Preview functions (e.g., ensuring they are private if they don't have parameters)
# Some custom rule sets (like Twitter's) offer specific rules for Previews.
# Example if using Twitter's rules:
# twitter_compose_preview_public_check = enabled
# twitter_compose_preview_public_only_if_params = true

# Disabling specific rules if they are too noisy or conflict with project style:
# ktlint_standard_rule-id = disabled
# ktlint_experimental_rule-id = disabled
# ktlint_custom-ruleset-id_rule-id = disabled

# Example: If `property-naming` is too strict with Compose `object`s for theming/constants
ktlint_standard_property-naming = disabled
# You might want to enable it and use @Suppress for specific cases if you prefer.

# Trailing commas are highly recommended for Compose for cleaner diffs when adding/reordering parameters.
# Already enabled above with:
# ktlint_standard_trailing-comma-on-call-site = enabled
# ktlint_standard_trailing-comma-on-declaration-site = enabled

# If you use a custom Ktlint rule set for Compose (like from Twitter/X or other sources),
# you'll need to add their specific properties here.
# For example, for the ruleset from mrmans0n/compose-rules:
# (Ensure you have this ruleset dependency in your project)
# [*.{kt,kts}]
# compose_view_model_factories = viewModel,hiltViewModel,myCustomViewModelFactory
# compose_content_emitters = MyCustomBox,MyCustomColumn
# compose_modifier_missing_ignore_annotated = MyInternalApiAnnotation
# ... and other properties as defined by that ruleset.